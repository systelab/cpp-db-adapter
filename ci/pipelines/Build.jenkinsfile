def channel = "testing"
def version = "0.0.0"
def packageNameInterface = "DbAdapterInterface"
def packageNameTestUtilities = "DbAdapterTestUtilities"
def profile = "vs2022.conanprofile"
def archs = ['x86', 'x86_64']
def configs = ['Debug', 'Release']


library identifier: "cpp-jenkins-pipelines@master", retriever: modernSCM(
  [$class: "GitSCMSource",
   remote: "https://github.com/systelab/cpp-jenkins-pipelines.git"])
   
pipeline
{
	agent
	{
		label 'lib-build'
	}

	parameters
	{
		string(	name: 'version',
				description: 'Number of the version to build (must match the name of the tag that will be checked out), leave as 0.0.0 for checkout of current branch',
				defaultValue: '0.0.0' )

		booleanParam( name: 'stable',
					  description: 'Show if generated library should be uploaded as stable or testing',
					  defaultValue: false )
	
		booleanParam( name: 'uploadPackage',
					  description: 'Whether or not to upload conan package',
					  defaultValue: false )
	}

	options
	{
		skipDefaultCheckout(true)
		disableConcurrentBuilds()
		buildDiscarder(logRotator(numToKeepStr: '5'))
	}

	stages
	{
		stage('Checkout')
		{
			steps
			{
				deleteDir()
				script 
				{
					if (params.version == '0.0.0')
					{
						checkoutSourceCode()
					}
					else
					{
						checkoutSourceCodeFromTag(version)
						version = params.version
					}
					channel = params.stable ? 'stable' : 'testing'
				}
			}
		}
		
		stage('Build')
		{	
			steps
			{
				dir('DbAdapterInterface')
				{
					bat script: "conan export-pkg ./conanfile.py ${packageNameInterface}/${version}@systelab/${channel} --profile=${env.WORKSPACE}/${profile} --force",
						label: "Exporting package ${packageNameInterface}/${version}@systelab/${channel}"
				}
				dir('DbAdapterTestUtilities')
				{
					script
					{
						archs.each
						{ arch ->
							configs.each
							{ config ->
								stage("Build ${config}|${arch}")
								{
									def buildFolder = "build-${config}-${arch}"
									bat script: "conan install . --install-folder ${buildFolder} --profile=${env.WORKSPACE}/${profile} -e VERSION=${version} -e CHANNEL=${channel} -s build_type=${config} -s arch=${arch}", label: 'Installing dependencies'
									bat script: "conan build . --build-folder ${buildFolder}", label: 'Building'
									bat script: "conan export-pkg . ${packageNameTestUtilities}/${version}@systelab/${channel} --build-folder ${buildFolder} --force", label: "Exporting package ${packageNameTestUtilities}/${version}@systelab/${channel}"
								}
							}
						}
					}
				
				}
			}
		}

		stage('Deploy')
		{
			when
			{
				expression { params.uploadPackage }
			}
			steps
			{
				script
				{
					bat script: "conan upload ${packageNameInterface}/${version}@systelab/${channel} --all -r systelab-conan-local --force", label: "Uploading package for ${packageNameInterface}/${version}@systelab/${channel}"
					bat script: "conan upload ${packageNameTestUtilities}/${version}@systelab/${channel} --all -r systelab-conan-local --force", label: "Uploading packages for ${packageNameTestUtilities}/${version}@systelab/${channel}"
				}
			}
		}
		
		post
		{
			always
			{
				script
				{
					currentBuild.description = "${version}/${channel}"
				}
			}
		}
	}
}
